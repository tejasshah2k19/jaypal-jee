facebook.com ->   signup.html 


signup.html -> first name , email , password -> fill -> submit -> request{fn,em,pwd} -->server 

server --> accept -> process -> response { valid ,invalid } 


client - user ==> request ==> server ==> accept request ==> process => response 


client -> request -> server -> response -> client 
 
 
2tier -> 
3tier ->   
		client => server => dbserver => response 
nTier -> 

---------------------------------------------------------

who is going to serve the request ==> server ? 

j2EE -> servlet -> 

what is the servlet ? 

servlet is your own class -> who extends HTTPServlet class 

class A extends Thread -> run()
class A extends HttpServlet ->  service()

1) SignupServlet { class extends HttpServlet } 
2) service() -> override {doPost doGet } 
3) url mapping -> browser url? 


servlet -> servlet-api.jar 

tomcat/lib -> 

how to link lib from tomcat/lib ? 


-------------------

Calc.html 
no1 [    ]
no2 [    ]

add()  sub()  mul(*) 

Submit 

-----------------------------------------

HTML is not deal with any programming lang. 
	java 
	
JEE -> 
		JSP : java server pages | java servlet pages
		
		jsp -> html + java 
		
		by default jsp understand html 

	1) <%  %>  scriptlet    --> any java logic on jsp  
	2) <%= %>  expression   --> print anything on jsp 
	3) <%! %>  declaration  --> declare variable on jsp 
	
all jsp will get 9 implicit objects 
	1) request 



gender  : radio  -> select 
country : select -> select 
hobby   : checkbox -> 2 select 
read and validate 

--------------------------------------------------------------

servlet life cycle --> 


LoginServlet ->

1) load class
2) create instance 
3) init() | init(ServletConfig) 
4) service()
5) destroy()  -> shutdown server 


instance -> thread -> 
if you make a request 500 times 

1 instance -> 500 threads -> 1 time init -> 500 times service 
CGI -> 500 request -> 500 instance 
-------------------------------------------------------------

filter = preprocess the request 

									
									
	filter	request	preProcess		servlet				
									
									
	login		blacklistfilter		icicbank	loginservlet			
			pak						
			banga						
									
									
	whatsapp		image	50 mb		server		50 mb	y
	x								
	x	image	filter	compress image	10 mb	server		10 mb	y
	x	text	filter	enctext		server		enctext	y 



1) implements Filter 
2) init doFilter destroy 
3) mapping -> servlet 

-------------------------------------------------------------
login -> servlet -> email password -> db -> information -> 
				store -> jsp -> read print 
				
				
	j2ee :
			1) cookie  -> store ? memory ? -> client browser -> browser -> less secure  
			2) session -> memory -> server -> secure 
			
		info-> privacy , security -> session  { pwd, otp, ccNum } 
		info -> public  -> cookie   { firstName , email } 




Login -> access -> logout/close browser --> logout 

Login -> XXX -> logout 
				auto login --> cookie --> 7 days 
								-> 3 days -> renew 
										  -> 7 days 
NewCookie.jsp 
	CookieName [     ] 
	CookeValue [     ] 
			[Save] 

ListAllCookies-> 

AddCookieServlet 
	read name and value from the form 
	add -> name , value 
	redirect -> NewCookie.jsp
	
	

ListAllCookies-> it will open a new serlvet that read all cookies from browser and print on browser 
CookieName [    ] 
	[Delete] 
DeleteCookieServlet -> delete the cookie 
------------------------------------------------------------
Login.jsp -> x:y -> submit -> servlet ->Home.jsp 
	browser close ->
	open -> Login.jsp ->redirect -> Home.jsp -> Logout ->Login.jsp 
	close browser -> 
	open -> Home.jsp -> Login.jsp 
	 
------------------------------------------------------------------	

user1 -> request -> X.jsp -> form,hidden{cookie->JSESSIONID}X    			memory 
				user1:browser		<----response<---JSESsionId			session:user1:123 					

user1 -> 2nd request -> Y.jsp -> cookie jsessionid :123 -->              jsessionid? valid? 123


HttpSesssion session  = request.getSession();//existing - new 

HttpSesssion session  = request.getSession(false);//existing - do not create new if not present 

session.setAttribute("userId",123);

int userId = (Integer) session.getAttirbute("userId");


1) Logout -> LogoutServlet -> 	
			HttpSession session = request.getSession();
			session.invalidate(); //destroy session
2)  
			HttpSession session = request.getSession();
			session.setMaxInactiveInterval(60*5);//second
3) 
		web.xml => minutes 
				<session-config>
					<session-timeout>5</session-timeout>
				</session-config>
	
---------------------------------------------------------------------------------			


Listener :- listen the events -> http - web 

request->set remove { settAttribute} 

session create / destroy 

server start / stop 


site -> user's online ->session created -> count -> 

	session created -> count++
	session destroyed -> count--
	
server --> aws -> connection establish
server --> aws -> connection stop 

1) class implements XXXListener -> override 
2) web.xml mapping 


-----------------------------------------------------------------------------------------

mysql,pg,sqllite,oracle, -> link db dep of database 
jar -> vendor -> 

lib->paste->link->javabuildpath->as add jar -> 

execute query in db -> Statement , PreparedStatement , CallableStatement*** 
stmt->sql->compile->parse->optimize-> execute 
pstmt->once->execute->second->prepared->execute 

----------------------------------------------------------------------------------------
servlet -> data set -> 

webapp -> single admin ->nodb -> email and password ? 



admin -> Login.jsp -> email and password -> LoginServlet {config} ->
 
------------------------------------------------------------------------

request -> servlet load -> load class-instance -thread -> process:service 


server start -> servlet load -> 

server start -> x servlet y servlet z servlet 

1
2
3
--------------------------------------------------------

jsp lifecycle 

1) translation
2) compilation
3) load class 
4) create instance 
5) jspInit()
6) _jspService()
7) jspDestroy() 

------------------------------------------------------------

java standard tag library - JSTL 


<% int x =20; %> 

<%=x %> 


<b> <i> -> java -> tag -> jstl

1) core*** 
2) sql 
3) format 
4) xml 
5) function 


1) jar -> lib -> jstl.jar 
2) jsp import -> taglib 


-----------------------------------------------------------------------------------------------------------
age < 18
	Less Chance 5% 
	
18-60
			gender 
      male 			female 
      smoke      	  25%      
   yes    no
  50%     25% 

age > 60 

diabetic    &&  bp [ both are ] 
    75%  
only diabetic 
   50% 

only bp 
 65% 
no diabetic no bp 
 30%  




on submit we will print all input on next page 
we also print heart dis. %chance with above data

also we need to insert all this patient data into database. 
we also need to validate -> name gender and age must be present
 
----------------------------------------------------------------------------------------------------- 


 
---------------------------------------------------------------
page -> directive ->
	import , autoFlush , session , 
	
	
9 implicit object in jsp

page 
out
pageContext 
request
response
session
application
config 
exception 



scope -> 
	page    |  A -> A  
	request |  A -> B 
	session |  A -> B C D E { whole application } { limited to that user-individual user-wise} 
	application | A -> B C D E { whole appliation } {common for all user } 
-----------------------------------------------------

Reusable web component -> inclusion 

HEADER 
content
FOOTER 
	
	
	1) static inclusion
	2) dynamic inclusion 
	
	<jsp:include page=""/> -> dynamic inclusion 
	<%@include file=""%>   -> static inclusion 

directive -> 
		1) <%@ page %>
		2) <%@ taglib %> 
		3) <%@ include %>
 


static ->   A.jsp 3 line  B.jsp 2 line ->  B.jsp include A.jsp -> {cod copied in B.jsp}
													   	 	 	  B.jsp {2+3} => 5 line 
dynamic -> A.jsp  3 line  B.jsp 2 line ->  B.jsp include A.jsp =>
				B.jsp->   goto A.jsp and append the output --> no code will copied in B.jsp

------------------------------------------

EL 

${error} 
${firstNameError}
 
	page , request ,session, application ---> blank 

${pageScope.error}  
${requestScope.error}  
${sessionScope.error}  
${applicationScope.error}  

${cookie.userName.value}


----------------------------------------------------
EL function

1) class -> logic 
2) .tld -> info
3) web.xml -> .tld 
4) import jsp use 
----------------------------------------------------

${greet()}

<greet></greet> 
Good Morning 



<sum n1="2" n2="3"></sum> => 5 

<b>test</b> 

<title>royal edu india</title>
Royal Edu India


custom	tag -> 
			1) simple tag 
			2) classic tag 

add jsp-api.jar in your project -> from tomcat lib { same as servlet-api } 


1) tag handler -> logic 
2) .tld  {define tag description}
3) web.xml {map tld} 
4) jsp use { taglib import } 


<date></date>  -> no body no attribute 


<date format="dd-mm-yyyy"></date>
<date format="yyyy-mm-dd"></date>
<date format="mm-dd-yyyy"></date>

--------------------------------------------------------------

classic tag 

class XXTag extends TagSupport {

	doStartTag() -> return 
	doEndTag()   -> return 
} 


1) no body no attribute 
	Greet 






















